Deploying a React + Vite + Serverless‑API project to Vercel
This checklist walks you file‑by‑file through the changes you’ll usually make inside the repo so the codebase builds and runs the same on Vercel as it does locally.
________________________________________
1  package.json (root)
{
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "preview": "vite preview"
  },
  "type": "module",           // if you already use ESM
  "dependencies": {
    // front‑end + shared deps only
  },
  "devDependencies": {
    // build‑time libs (vite, eslint, etc.)
  }
}
Why? Vercel runs npm run build; make sure it produces dist/.
________________________________________
2  vite.config.(ts|js)
import { defineConfig } from "vite";
import react from "@vitejs/plugin-react";

export default defineConfig({
  base: "/",            // **always** deploy at domain root on Vercel
  plugins: [react()],
});
Why? Relative asset URLs prevent 404s on production links.
________________________________________
3  Folder structure
repo‑root/
│
├─ src/               ← React UI
│   └─ …
│
├─ api/               ← Each file → 1 Vercel serverless function
│   ├─ index.js       ← GET /api/index
│   └─ login.js       ← POST /api/login
│
└─ vite.config.js
Why? Vercel automatically detects /api and builds Node functions.
If you have an existing Express app
1.	Move only the route handlers into api/ files.
2.	Or wrap the app:
// api/index.vercel.js
const app = require("../src/server");
module.exports = (req, res) => app(req, res);
________________________________________
4  vercel.json (optional but recommended)
{
  "framework": "vite",          // lets Vercel auto‑detect
  "outputDirectory": "dist",   // same as `vite build` output
  "rewrites": [                 // SPA history fallback
    { "source": "/api/:path*", "destination": "/api/:path*" },
    { "source": "/(.*)",       "destination": "/index.html" }
  ],
  "functions": {
    "api/**/*.js": {
      "runtime": "nodejs18.x",
      "maxDuration": 15
    }
  }
}
Why? Guarantees that React Router routes load index.html and keeps API endpoints untouched.
________________________________________
5  Front‑end API calls
// BEFORE (dev only)
fetch("http://localhost:5000/api/notes");

// AFTER (works locally via Vite proxy + on Vercel)
fetch("/api/notes");
Why? Same‑origin calls sidestep CORS and match serverless paths.
________________________________________
6  Environment variables
•	Front‑end → prefix with VITE_ (e.g. VITE_FIREBASE_KEY).
•	Back‑end → any name you like.
Add them in Vercel → Project → Settings → Environment Variables.
// front‑end
const baseURL = import.meta.env.VITE_API_URL;

// serverless function
export default function handler(req, res) {
  const db = process.env.DATABASE_URL;
}
________________________________________
7  .gitignore
# Build output
/dist
/.vercel
Why? Vercel builds dist itself; .vercel contains per‑machine tokens.
________________________________________
8  Local production test (optional but helpful)
npm ci                   # clean install
npm run build            # build front‑end
npx vercel build         # replicates cloud build locally
npx vercel serve .vercel/output  # view at http://localhost:3000
Why? Catches build errors before you push.
________________________________________
9  Push & deploy
1.	Push to GitHub / GitLab / Bitbucket.
2.	In Vercel dashboard: Add Project → Import → repo.
3.	Accept defaults (framework = Vite, build = npm run build, output = dist).
4.	Add env vars when prompted.
5.	Deploy → wait for success → your site is live.
________________________________________
10  Troubleshooting cheatsheet
Issue	Quick fix
404 on React Router path	Confirm rewrites to /index.html.
API endpoint 404	Check file path inside api/, must match request.
VITE_… undefined	Added env var but forgot the prefix or didn’t redeploy.
Cold start lag	Keep each function small; consider Edge Functions.
________________________________________
You’re ready! ✨
Commit these changes, push, and the next Vercel build should Just Work™.
